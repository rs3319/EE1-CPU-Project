module AddressDecode
(
	input [7:0] IR_opcode,
	input EXEC1,
	input EXEC2,
	input EXEC3
	input EQ,
	input MI,
	output PC_sync_load,
	output PC_count_enable,
	output MUX1_select,
	output RAM_write_enable,
	output MUX2sel,
	output MUXLsel,
	output EXTRA1,
	output EXTRA2
);

	wire LDA, STA, ADD, SUB, MUL, JMP, JMI, JEQ, LDI, LDN, SSS, PUSH, POP;
	
	assign LDA = ~IR_opcode[7] & ~IR_opcode[6] & ~IR_opcode[5] & ~IR_opcode[4];   
	assign STA = ~IR_opcode[7] & ~IR_opcode[6] & ~IR_opcode[5] & IR_opcode[4];
	assign ADD = ~IR_opcode[7] & ~IR_opcode[6] & IR_opcode[5] & ~IR_opcode[4];
	assign SUB = ~IR_opcode[7] & ~IR_opcode[6] & IR_opcode[5] & IR_opcode[4];
	assign MUL = ~IR_opcode[7] & IR_opcode[6] & ~IR_opcode[5] & ~IR_opcode[4]; 
	assign JMP = ~IR_opcode[7] & IR_opcode[6] & ~IR_opcode[5] & IR_opcode[4]; 
	assign JMI = ~IR_opcode[7] & IR_opcode[6] & IR_opcode[5] & ~IR_opcode[4];  
	assign JEQ = ~IR_opcode[7] & IR_opcode[6] & IR_opcode[5] & IR_opcode[4]; 
	assign LDI = IR_opcode[7] & ~IR_opcode[6] & ~IR_opcode[5] & ~IR_opcode[4]; 
	assign LDN = IR_opcode[7] & ~IR_opcode[6] & ~IR_opcode[5] & IR_opcode[4];
	assign SSS = IR_opcode[7] & ~IR_opcode[6] & IR_opcode[5] & ~IR_opcode[4];
	assign PUSH = IR_opcode[7] & ~IR_opcode[6] & IR_opcode[5] & IR_opcode[4]; 
	assign POP = IR_opcode[7] & IR_opcode[6] & ~IR_opcode[5] & ~IR_opcode[4];
		
	
	wire STP, LSR, ASR, XSL, MOVE, INCR, DECR, ADDR, SUBR, MULT;
	
	assign STP = SSS & (~IR_opcode[3] & ~IR_opcode[2] & ~IR_opcode[1] & ~IR_opcode[0]);
	assign LSR = SSS & (~IR_opcode[3] & ~IR_opcode[2] & ~IR_opcode[1] & IR_opcode[0]);
	assign ASR = SSS & (~IR_opcode[3] & ~IR_opcode[2] & IR_opcode[1] & ~IR_opcode[0]);
	assign XSL = SSS & (~IR_opcode[3] & ~IR_opcode[2] & IR_opcode[1] & IR_opcode[0]);
	assign MOVE = SSS & (~IR_opcode[3] & IR_opcode[2] & ~IR_opcode[1] & ~IR_opcode[0]);
	assign INCR = SSS & (~IR_opcode[3] & IR_opcode[2] & ~IR_opcode[1] & IR_opcode[0]);
	assign DECR = SSS & (~IR_opcode[3] & IR_opcode[2] & IR_opcode[1] & ~IR_opcode[0]);
	assign ADDR = SSS & (~IR_opcode[3] & IR_opcode[2] & IR_opcode[1] & IR_opcode[0]);
	assign SUBR = SSS & (IR_opcode[3] & ~IR_opcode[2] & ~IR_opcode[1] & ~IR_opcode[0]);
	assign MULT = SSS & (IR_opcode[3] & ~IR_opcode[2] & ~IR_opcode[1] & IR_opcode[0]);
	